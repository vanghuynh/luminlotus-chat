from pprint import pp
from unittest import result
from langchain_core.tools import tool
from src.utils.helper import convert_list_context_source_to_str
from src.utils.logger import logger
from langchain_core.runnables import RunnableConfig
from langchain_experimental.utilities import PythonREPL
from langchain_community.tools import DuckDuckGoSearchRun
from src.utils.rcmsizetool import predict_size_public_text
import psycopg2
import re
from dotenv import load_dotenv
import os
import json
from flask import request
from urllib.parse import quote
from typing import Optional, Tuple

duckduckgo_search = DuckDuckGoSearchRun()
python_exec = PythonREPL()
load_dotenv()
conn_str = os.getenv("SUPABASE_DB_URL")
conn = psycopg2.connect(conn_str)
cursor = conn.cursor()
BASE_URL = os.getenv("PRODUCT_BASE_URL")

# H√†m g·ª£i √Ω size
def predict_size_model(user_text: str) -> str:
    """
    G·ª£i √Ω size d·ª±a v√†o chi·ªÅu cao, c√¢n n·∫∑ng, gi·ªõi t√≠nh, phong c√°ch m·∫∑c (√¥m, v·ª´a, r·ªông)
    N·∫øu ng∆∞·ªùi d√πng s·ª≠ d·ª•ng ti·∫øng anh ƒë·ªÉ giao ti·∫øp th√¨ k·∫øt qu·∫£ tr·∫£ ra b·∫±ng ti·∫øng anh, n·∫øu ng∆∞·ªùi d√πng s·ª≠ d·ª•ng ti·∫øng vi·ªát ƒë·ªÉ giao ti·∫øp th√¨ k·∫øt qu·∫£ tr·∫£ ra b·∫±ng ti·∫øng vi·ªát.
    Args:
        height : chi·ªÅu cao c·ªßa ng∆∞·ªùi d√πng
        weight: c√¢n n·∫∑ng c·ªßa ng∆∞·ªùi d√πng
        gender : gi·ªõi t√≠nh c·ªßa ng∆∞·ªùi d√πng
        fit : phong c√°ch nh∆∞ √¥m, v·ª´a, r·ªông
    """
    return predict_size_public_text(user_text)


# H√†m chu·∫©n h√≥a ƒë·∫ßu v√† t√¨m ki·∫øm s·∫£n ph·∫©m
# Chu·∫©n h√≥a input
def normalize_size(size: str) -> str:
    if not size:
        return ""
    return size.strip().upper()
    
CATEGORY_MAPPING_INPUT = {
    "men": "Th·ªùi trang nam",
    "male": "Th·ªùi trang nam",
    "man": "Th·ªùi trang nam",
    "women": "Th·ªùi trang n·ªØ",
    "female": "Th·ªùi trang n·ªØ",
    "woman": "Th·ªùi trang n·ªØ",
}
CATEGORY_MAPPING_OUTPUT = {
    "Th·ªùi trang nam": "Men's Fashion",
    "Th·ªùi trang n·ªØ": "Women's Fashion",
}

def normalize_category(category: Optional[str]) -> str:
    if not category:
        return ""
    c = category.strip().lower()
    if c in CATEGORY_MAPPING_INPUT:
        return CATEGORY_MAPPING_INPUT[c]
    if "nam" in c or "men" in c:
        return "Th·ªùi trang nam"
    if "n·ªØ" in c or "nu" in c or "women" in c or "woman" in c:
        return "Th·ªùi trang n·ªØ"
    return category.title()

def translate_category_for_output(category_name: str, lang: str) -> str:
    if lang == "en":
        return CATEGORY_MAPPING_OUTPUT.get(category_name, category_name)
    return category_name

def normalize_lang(lang: Optional[str]) -> str:
    return (lang or "").strip().lower()

def detect_lang(user_input: Optional[str]) -> str:
    """Nh·∫≠n di·ªán nhanh EN/VN t·ª´ text ng∆∞·ªùi d√πng (kh√¥ng d√πng lib ngo√†i)."""
    t = (user_input or "").strip().lower()
    if any(x in t for x in ["en", "eng", "english", "us", "america", "american"]):
        return "en"
    if any(x in t for x in ["vi", "vn", "vie", "vietnam", "vietnamese", "ti·∫øng vi·ªát", "tieng viet"]):
        return "vi"
    return "vi"  # m·∫∑c ƒë·ªãnh

def format_price(amount: Optional[float], currency_symbol: Optional[str], country_code: str) -> str:
    if amount is None:
        return "Li√™n h·ªá"
    # ∆Øu ti√™n symbol t·ª´ DB; fallback theo country
    symbol = currency_symbol or ("$" if country_code == "US" else "‚Ç´")
    if country_code == "US":
        return f"{symbol}{amount:,.2f}"
    return f"{amount:,.0f} {symbol}"

# Parse kho·∫£ng gi√° t·ª± nhi√™n
def parse_price_range(price_range: str) -> Optional[tuple[int, int]]:
    """
    H·ªó tr·ª£ c·∫£ ti·∫øng Vi·ªát & ti·∫øng Anh: 'd∆∞·ªõi 500k', 'tr√™n 1tr', 't·ª´ 200k-500k',
    'under 50', 'over 100', 'about 70', 'from 20-40', '20-40', ...
    Tr·∫£ v·ªÅ (min, max) ho·∫∑c None n·∫øu kh√¥ng parse ƒë∆∞·ª£c.
    """
    if not price_range:
        return None
    pr_l = price_range.lower()
    # chu·∫©n h√≥a s·ªë: b·ªè . , ƒë·ªïi 'tr' th√†nh 000000, 'k' th√†nh 000
    t = pr_l.replace(".", "").replace(",", "")
    t = t.replace("tr", "000000").replace("k", "000")
    t = re.sub(r"[^\d\-]", " ", t)
    digits = [int(s) for s in t.split() if s.isdigit()]

    price_min, price_max = 0, 1_000_000_000  # 1e9
    if ("d∆∞·ªõi" in pr_l or "under" in pr_l) and digits:
        price_max = digits[0]
    elif ("tr√™n" in pr_l or "over" in pr_l) and digits:
        price_min = digits[0]
    elif ("kho·∫£ng" in pr_l or "about" in pr_l) and digits:
        price_min = price_max = digits[0]
    elif ("t·ª´" in pr_l or "from" in pr_l) and "-" in pr_l:
        try:
            a, b = pr_l.split("-", 1)
            price_min = int("".join(filter(str.isdigit, a)))
            price_max = int("".join(filter(str.isdigit, b)))
        except Exception:
            pass
    elif "-" in pr_l:
        try:
            a, b = pr_l.split("-", 1)
            price_min = int("".join(filter(str.isdigit, a)))
            price_max = int("".join(filter(str.isdigit, b)))
        except Exception:
            pass
    else:
        # Kh√¥ng nh·∫≠n ra pattern ‚Üí tr·∫£ None ƒë·ªÉ b·ªè filter
        return None
    return (price_min, price_max)

def unknown_label(lang: str) -> str:
    return "Unknown" if (lang or "").lower() == "en" else "Ch∆∞a r√µ"

# ==== H√†m t√¨m ki·∫øm s·∫£n ph·∫©m ====
def extract_query_product(
    size: str = "",
    color: str = "",
    price_range: str = "",
    in_stock: bool = True,
    limit: int = 5,
    country_code: str = "",
    lang: str = "",
    category_name: str = "",
) -> str:
    """
    Truy v·∫•n s·∫£n ph·∫©m 
    T·ª± ƒë·ªông nh·∫≠n di·ªán lang t·ª´ input (en/vi), map sang country_code (US/VN) n·∫øu ch∆∞a truy·ªÅn.
    Hi·ªÉn th·ªã ƒë√∫ng k√Ω hi·ªáu ti·ªÅn theo b·∫£ng Country ho·∫∑c fallback theo country_code.
    ƒêi·ªÅu ki·ªán n√†o kh√¥ng mu·ªën cung c·∫•p th√¨ b·ªè qua (ng∆∞·ªùi d√πng c√≥ th·ªÉ n√≥i "n√†o c≈©ng ƒë∆∞·ª£c"/"any"/"no preference/"kh√¥ng"/"No"/"no", t·∫•t c·∫£ s·∫£n ph·∫©m" cho ƒëi·ªÅu ki·ªán ƒë√≥).
    Returns:
        str: K·∫øt qu·∫£ t√¨m ki·∫øm s·∫£n ph·∫©m d∆∞·ªõi d·∫°ng markdown.
    """
    lang = normalize_lang(detect_lang(lang))  

    # Chu·∫©n h√≥a input
    size = normalize_size(size)
    category_name_norm = normalize_category(category_name)

    if not country_code:
        country_code = "US" if lang == "en" else "VN"

    sql = """
    SELECT 
        p.id,
        p.name AS product_name,
        pp.price,
        c."currencySymbol",
        v.size,
        v.color,
        v.sku,
        v.stock,
        p.images[1] AS image_url,
        cat.name AS category_db_name
    FROM "Product" p
    LEFT JOIN "ProductVariant" v ON v."productId" = p.id
    LEFT JOIN "ProductPrice" pp ON pp."productId" = p.id
    LEFT JOIN "Country" c ON c.id = pp."countryId"
    LEFT JOIN "Category" cat ON cat.id = p."categoryId"
    WHERE 1=1
    """
    params = []

    # L·ªçc qu·ªëc gia
    sql += " AND c.code = %s"
    params.append(country_code)

    # L·ªçc c√≤n h√†ng
    if in_stock:
        sql += " AND v.stock > 0"

    has_filters = False

    # L·ªçc danh m·ª•c
    if category_name_norm:
        has_filters = True
        sql += " AND LOWER(cat.name) LIKE %s"
        params.append(f"%{category_name_norm.lower()}%")

    # L·ªçc size
    if size:
        has_filters = True
        sql += " AND UPPER(v.size) = %s"
        params.append(size)

    # L·ªçc m√†u
    if color:
        has_filters = True
        sql += " AND LOWER(v.color) = %s"
        params.append(color.lower())

    # Gi√°
    price = parse_price_range(price_range)
    if price:
        has_filters = True
        price_min, price_max = price
        sql += " AND pp.price BETWEEN %s AND %s"
        params.extend([price_min, price_max])

    # S·∫Øp x·∫øp
    if not has_filters:
        sql += ' ORDER BY p."createdAt" DESC, p.id DESC LIMIT %s'
    else:
        sql += ' ORDER BY COALESCE(pp.price, p.price) ASC, p."createdAt" DESC LIMIT %s'
    params.append(limit)

    # Th·ª±c thi query
    cursor.execute(sql, params)
    products = cursor.fetchall()

    if not products:
        return "üòî Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n."

    response = "üîé **K·∫øt qu·∫£ t√¨m ki·∫øm s·∫£n ph·∫©m:**\n"
    for p in products:
        pid, name, price, currency_symbol, size, color, sku, stock, images_url, category_db_name = p
        # D·ªãch danh m·ª•c n·∫øu lang = 'en'
        cat_display = translate_category_for_output(
            normalize_category(category_db_name or ""), lang
        ) or unknown_label(lang)        
        price_fmt = format_price(price, currency_symbol, country_code)
        response += (
            f"\nüß• **{name}**\n"
            f"- Danh m·ª•c: {cat_display}\n"
            f"- üí∞ Gi√°: {price_fmt}\n"
            f"- üé® M√†u: {color} | üìè Size: {size}\n"
            f"- üî¢ SKU: {sku} | üì¶ C√≥ s·∫µn: {stock}\n"
            f"- [Xem chi ti·∫øt]({BASE_URL}/{pid})\n"
            f"- üñºÔ∏è H√¨nh ·∫£nh: ![Image]({images_url})\n"
        )
    response += "\nüëâ B·∫°n mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o kh√¥ng?"
    return response

# Tr√≠ch xu·∫•t ki·ªÉm tra ƒë∆°n h√†ng
def check_order_status(
    order_id: str = "", country_code: str = "", lang: str = ""
) -> str:
    """
    Ki·ªÉm tra t√¨nh tr·∫°ng ƒë∆°n h√†ng v√† hi·ªÉn th·ªã chi ti·∫øt t·ª´ng ƒë∆°n h√†ng k√®m th√¥ng tin kh√°ch h√†ng v√† s·∫£n ph·∫©m theo m√£ ƒë∆°n h√†ng.
    Args:
        order_id (str): M√£ ƒë∆°n h√†ng c·ªßa ƒë∆°n h√†ng.
    Returns:
        str: K·∫øt qu·∫£ ki·ªÉm tra ƒë∆°n h√†ng d∆∞·ªõi d·∫°ng markdown.
    """
    if not country_code:
        country_code = "US" if lang == "en" else "VN"
    price_unit = "$" if lang == "en" else "VND"
    sql = """
        SELECT 
            o.id,
            o."orderCode",
            o.status,
            o."createdAt",
            o.total,
            o."shippingFullName",
            a."firstName",
            a."lastName",
            o."shippingEmail",
            a.phone,
            o."customerNote",
            a.street,
            a.ward,
            a.district,
            a.province,
            a."countryId",
            o."uniqueCode"
        FROM "Order" o
        LEFT JOIN "Address" a ON a.id = o."addressId"
        WHERE 1=1
    """
    params = []
    if order_id:
        sql += ' AND o."uniqueCode" ILIKE %s'
        params.append(f"%{order_id}%")
    try:
        cursor.execute(sql, params)
        orders = cursor.fetchall()
        if not orders:
            return "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o kh·ªõp v·ªõi th√¥ng tin b·∫°n cung c·∫•p."
        response = "T√¥i ƒë√£ t√¨m th·∫•y c√°c ƒë∆°n h√†ng c·ªßa b·∫°n v·ªõi th√¥ng tin ƒë√£ cung c·∫•p:\n"
        for order in orders:
            (
                order_db_id,
                order_code,
                status,
                created_at,
                total,
                shipping_full_name,
                first_name,
                last_name,
                email,
                phone_num,
                note,
                street,
                ward,
                district,
                province,
                country_id,
                unique_code,
            ) = order
            full_name = shipping_full_name.strip() if shipping_full_name else f"{first_name or ''} {last_name or ''}".strip()
            created_at_fmt = created_at.strftime("%d/%m/%Y")
            total_fmt = f"{total:,.0f} {price_unit}"
            note = note if note else "(kh√¥ng c√≥ ghi ch√∫)"
            shipping_address = ", ".join([p for p in [street, ward, district, province] if p])
            # L·∫•y s·∫£n ph·∫©m (d√πng c√°ch l·∫•y h√¨nh nh∆∞ extract_query_product)
            item_sql = """
                SELECT 
                    p.name,
                    v.size,
                    v.color,
                    i.quantity,
                    i.price,
                    COALESCE(p.images[1], '') AS image_url
                FROM "OrderItem" i
                JOIN "Product" p ON p.id = i."productId"
                JOIN "ProductVariant" v ON v.id = i."productVariantId"
                WHERE i."orderId" = %s
            """
            cursor.execute(item_sql, (order_db_id,))
            items = cursor.fetchall()
            response += f"\n**ƒê∆°n h√†ng #{unique_code}**\n"
            # Hi·ªÉn th·ªã s·∫£n ph·∫©m tr∆∞·ªõc, m·ªói thu·ªôc t√≠nh xu·ªëng d√≤ng
            for name, size, color, quantity, price, image_url in items:
                price_fmt = f"{price:,.0f} {price_unit}"
                response += (
                    f"* S·∫£n ph·∫©m: {name}\n"
                    f"  - Size: {size}\n"
                    f"  - M√†u: {color}\n"
                    f"  - S·ªë l∆∞·ª£ng: {quantity}\n"
                    f"  - Gi√°: {price_fmt}\n"
                )
                if image_url:
                    response += f"  - üñºÔ∏è H√¨nh ·∫£nh: ![Image]({image_url})\n"
            # Sau ƒë√≥ m·ªõi t·ªõi th√¥ng tin ƒë∆°n h√†ng
            response += (
                f"- Tr·∫°ng th√°i: {status}\n"
                f"- Ng√†y ƒë·∫∑t: {created_at_fmt}\n"
                f"- T·ªïng ti·ªÅn: {total_fmt}\n"
                f"- Ng∆∞·ªùi nh·∫≠n: {full_name}\n"
                f"- Email: {email}\n"
                f"- S·ªë ƒëi·ªán tho·∫°i: {phone_num}\n"
                f"- ƒê·ªãa ch·ªâ giao h√†ng: {shipping_address}\n"
                f"- Ghi ch√∫: {note}\n"
                f"- M√£ ƒë∆°n h√†ng duy nh·∫•t: {unique_code}\n"
            )
        return response
    except Exception as e:
        logger.error(f"Error checking order: {e}")
        return "ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau."

# Truy v·∫•n th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
def extract_information_product(
    product_keyword: str, lang: str = "vi", country_code: str = ""
) -> str:
    """
    Truy v·∫•n th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m theo t·ª´ kh√≥a ho·∫∑c t√™n s·∫£n ph·∫©m.
    Args:
        product_keyword (str): T·ª´ kh√≥a ho·∫∑c t√™n s·∫£n ph·∫©m c·∫ßn t√¨m.
        lang (str): Ng√¥n ng·ªØ c·ªßa ng∆∞·ªùi d√πng, ·∫£nh h∆∞·ªüng ƒë·∫øn c√°ch hi·ªÉn th·ªã k·∫øt qu·∫£.
        country_code (str): M√£ qu·ªëc gia ƒë·ªÉ l·∫•y gi√° theo qu·ªëc gia.
    Returns:
        str: K·∫øt qu·∫£ th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m d∆∞·ªõi d·∫°ng markdown.
    """
    if not country_code:
        country_code = "US" if lang == "en" else "VN"
    price_unit = "$" if lang == "en" else "VND"
    sql = """
        SELECT 
            p.id,
            p.name,
            p.description,
            pp.price AS country_price,
            p.images[1] AS image_url,
            c.name AS category_name,
            v.id AS variant_id,
            v.color,
            v.size,
            v.stock AS variant_stock,
            v.sku,
            v.weight
        FROM "Product" p
        LEFT JOIN "ProductVariant" v ON v."productId" = p.id 
        LEFT JOIN "Category" c ON c.id = p."categoryId"
        LEFT JOIN "ProductPrice" pp ON pp."productId" = p.id
        LEFT JOIN "Country" co ON co.id = pp."countryId"
        WHERE LOWER(p.name) ILIKE %s AND co.code = %s
        ORDER BY v.size, v.color
    """
    cursor.execute(sql, (f"%{product_keyword.lower()}%", country_code))
    rows = cursor.fetchall()
    if not rows:
        return f"Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o kh·ªõp v·ªõi t·ª´ kh√≥a: {product_keyword}"
    first = rows[0]
    name, desc, price, images_url, category = (
        first[1],
        first[2],
        first[3],
        first[4],
        first[5],
    )
    header_variant_stock = first[9]
    response = f"üõç **{name}**\n"
    response += (
        f"- Danh m·ª•c: {category}\n"
        f"- Gi√°: {price:,.0f} {price_unit}\n"
        f"- C√≥ s·∫µn: {header_variant_stock}\n"
        f"- M√¥ t·∫£: {desc}\n"
        f"- [Xem chi ti·∫øt]({BASE_URL}/{first[0]})\n"
    )
    response += f"- üñºÔ∏è H√¨nh ·∫£nh: ![Image]({images_url})\n"
    response += "\nüîÑ **C√°c bi·∫øn th·ªÉ:**\n"
    for row in rows:
        response += (
            f"* M√†u: {row[7]} \n"
            f"  Size: {row[8]} ‚Äì \n"
            f"  SKU: {row[10]} ‚Äì \n"
            f"  C√≥ s·∫µn: {row[9]} ‚Äì \n"
            f"  N·∫∑ng: {row[11]}kg\n"
        )
    return response


# L·∫•y th√¥ng tin v·ªÅ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i hi·ªán c√≥
def check_active_coupons(lang: str = "", country_code: str = "") -> str:
    """
    Tr·∫£ v·ªÅ danh s√°ch c√°c m√£ gi·∫£m gi√° c√≤n hi·ªáu l·ª±c d∆∞·ªõi d·∫°ng markdown.
    """
    if not country_code:
        country_code = "US" if lang == "en" else "VN"
    price_unit = "$" if lang == "en" else "VND"
   
    sql = """
        SELECT 
            code,
            type,
            "discountType",
            "discountValue",
            "maxDiscount",
            "minOrderValue",
            "startDate",
            "endDate"
        FROM "Coupon"
        WHERE "isActive" = TRUE
            AND type = 'PUBLIC'
            AND NOW() BETWEEN "startDate" AND "endDate"
        ORDER BY "startDate" DESC
        LIMIT 10
    """
    try:
        cursor.execute(sql)
        coupons = cursor.fetchall()

        if not coupons:
            return "Hi·ªán t·∫°i kh√¥ng c√≥ m√£ gi·∫£m gi√° n√†o ƒëang ho·∫°t ƒë·ªông."

        response = "üéÅ **Danh s√°ch m√£ gi·∫£m gi√° hi·ªán c√≥:**\n"
        for c in coupons:
            (
                code,
                ctype,
                discount_type,
                discount_value,
                max_discount,
                min_order_value,
                start_date,
                end_date,
            ) = c

            # Hi·ªÉn th·ªã m·ª©c gi·∫£m
            if discount_type == "AMOUNT":
                discount_info = f"{discount_value:,.0f} {price_unit}"
            elif discount_type == "PERCENT":
                discount_info = f"{discount_value:.0f}%"
            else:
                discount_info = f"{discount_value}"

            max_discount_str = (
                f" ‚Äì Gi·∫£m t·ªëi ƒëa {max_discount:,.0f} {price_unit}"
                if max_discount
                else ""
            )
            min_order_str = (
                f" ‚Äì ƒê∆°n t·ªëi thi·ªÉu {min_order_value:,.0f} {price_unit}"
                if min_order_value
                else ""
            )

            response += (
                f"- M√£ **{code}**: Gi·∫£m {discount_info}{max_discount_str}{min_order_str}\n"
                f"  ‚è≥ Hi·ªáu l·ª±c: {start_date.strftime('%d/%m/%Y')} ‚Üí {end_date.strftime('%d/%m/%Y')}\n"
            )

        return response

    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y coupon: {e}")
        return "ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra m√£ gi·∫£m gi√°. Vui l√≤ng th·ª≠ l·∫°i sau."
